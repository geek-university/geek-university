# encoding: utf-8
# Autogenerated by the db:seed:dump task
# Do not hesitate to tweak this to your needs

AdminUser.create([
  { :email => "admin@example.com", :encrypted_password => "$2a$10$ZBZ9ELH1Z0upwxgvpJEXGO.9Oj5h7hGNcouz.4QlHw5jid66LvCcG", :reset_password_token => nil, :reset_password_sent_at => nil, :remember_created_at => nil, :sign_in_count => 0, :current_sign_in_at => nil, :last_sign_in_at => nil, :current_sign_in_ip => nil, :last_sign_in_ip => nil, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" }
], :without_protection => true )



Course.create([
  { :name => "Веб разработка на Django", :short_summary => "С помощью простой и надежной платформы Django, основанной на языке Python, можно создавать мощные веб-решения, написав всего несколько строк кода. ", :description => "<p><span style=\"color: rgb(0, 0, 0); font-family: Verdana, sans-serif; line-height: 20px;\">С помощью простой и надежной платформы Django, основанной на языке Python, можно создавать мощные веб-решения, написав всего несколько строк кода. Ее использование позволяет обеспечить высокую скорость и гибкость разработки, а также решать широкий спектр прикладных задач. Авторы, опытные разработчики, описывают все приемы, инструменты и концепции, которые необходимо знать, чтобы оптимально использовать Django 1.0, включая все основные особенности новой версии.</span><br style=\"color: rgb(0, 0, 0); font-family: Verdana, sans-serif; line-height: 20px;\" />\r\n<span style=\"color: rgb(0, 0, 0); font-family: Verdana, sans-serif; line-height: 20px;\">Это полное руководство начинается с введения в Python, затем подробно обсуждаются основные компоненты Django (модели, представления и шаблоны) и порядок организации взаимодействия между ними. Описываются методы разработки конкретных приложений: блог, фотогалерея, система управления содержимым, инструмент публикации фрагментов кода с подсветкой синтаксиса. После этого рассматриваются более сложные темы: расширение системы шаблонов, синдицирование, настройка приложения администрирования и тестирование веб-приложений. Авторы раскрывают разработчику секреты Django, давая подробные разъяснения и предоставляя большое количество примеров программного кода, сопровождая их построчным описанием и иллюстрациями.</span></p>\r\n", :organisation => "Django unchained", :logo_file_name => "html5css33.png", :logo_content_type => "image/png", :logo_file_size => 18680, :logo_updated_at => "2013-03-10 12:15:08", :start_date => "2013-03-14", :end_date => "2013-04-30", :published => 1, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 02:01:05" },
  { :name => "Веб-разработка с удовольствием", :short_summary => "Ruby on Rails - веб-ориентированная среда разработки с открытым кодом, оптимизированная для удобства программирования и устойчивой производительности.", :description => "<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, Lucida Grande, arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Что входит<br />\r\nв Rails?</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, Lucida Grande, arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Rails&nbsp;\u0097 это полноценный, многоуровневый фреймворк для построения&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">веб-приложений, использующих базы данных</span>, который основан на&nbsp;архитектуре Модель-Представление-Контроллер (Model-View-Controller, MVC).</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Динамичный AJAX-интерфейс, обработка запросов и&nbsp;выдача данных в&nbsp;контроллерах, предметная область, отраженная в&nbsp;базе данных,&nbsp;&mdash; для всего этого Rails предоставляет однородную среду разработки на&nbsp;Ruby. Все, что необходимо для начала&nbsp;&mdash; база данных и&nbsp;веб-сервер.</p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, Lucida Grande, arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n\r\n<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, Lucida Grande, arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Кто пользуется<br />\r\nRails?</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, Lucida Grande, arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Rails используют все&nbsp;&mdash; от&nbsp;стартапов и&nbsp;некоммерческих организаций до&nbsp;крупного бизнеса. Rails&nbsp;&mdash; это прежде всего инфраструктура, поэтому среда великолепно подходит для любого типа веб-приложений, будь это программы для&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">организации совместной работы, поддержки сообществ, электронного бизнеса, управления содержанием, статистики, управления...</span></p>\r\n</div>\r\n", :organisation => "David Heinemeier Hansson", :logo_file_name => "ruby_on_rails-100021058-large.jpg", :logo_content_type => "image/jpeg", :logo_file_size => 10339, :logo_updated_at => "2013-03-20 01:02:49", :start_date => "2013-03-20", :end_date => "2013-03-20", :published => 2, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:02:49" },
  { :name => "Разработка компьютерных игр", :short_summary => "Разработка игр – это особая область разработки программного обеспечения. Для наилучшего восприятия доклада желательно иметь опыт разработчика игр или хотя бы базовый игровой опыт.", :description => "<p>Разработка игр &ndash; это особая область разработки программного обеспечения. С одной стороны, все как обычно: фичи, баги, майлстоуны, пользовательский интерфейс, смена ТЗ и даже тесты. Но создание интерактивной виртуальной реальности ставит весьма специфические задачи и требования, от очень больших до совсем маленьких.</p>\r\n\r\n<p><br />\r\nВот несколько примеров: освещение сцены должно быть реалистичным (вы должны знать физические основы процессов), враги не должны тупить (искусственный интеллект агентов должен быть на высоте), в игру должно быть в меру сложно играть (игровые настройки должны быть тонко сбалансированы), при попадании пуль в стены должны оставаться следы, мимика персонажа не должна вызывать отторжения&hellip;<br />\r\nВ этом докладе мы разберем процесс создания игр на запчасти: посмотрим на команду, которая делает игру, заглянем вглубь игровых скриншотов, вывернем наизнанку игровой арт, посмотрим на игру суровым взглядом продюсера. А потом увидим, как теория преломляется в практике на примере игрового движка Unity.</p>\r\n\r\n<p><br />\r\nДля наилучшего восприятия доклада желательно иметь опыт разработчика игр или хотя бы базовый игровой опыт. Например, неплохо знать как выглядит <a href=\"http://en.wikipedia.org/wiki/Doom_II:_Hell_on_Earth\">вот такая игра</a>.</p>\r\n", :organisation => "Сообщество \"CodeFreeze\"", :logo_file_name => "images_(8).jpg", :logo_content_type => "image/jpeg", :logo_file_size => 8984, :logo_updated_at => "2013-03-20 00:17:38", :start_date => "2013-03-23", :end_date => "2013-04-25", :published => 1, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 02:01:37" }
], :without_protection => true )



CourseUser.create([
  { :course_id => 3, :user_id => 1, :material_id => nil, :can_manage => false, :last_viewed => nil, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:00:44" },
  { :course_id => 2, :user_id => 2, :material_id => nil, :can_manage => true, :last_viewed => nil, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:00:44" },
  { :course_id => 3, :user_id => 2, :material_id => nil, :can_manage => true, :last_viewed => nil, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:00:44" },
  { :course_id => 2, :user_id => 3, :material_id => nil, :can_manage => false, :last_viewed => nil, :created_at => "2013-03-20 01:09:11", :updated_at => "2013-03-20 01:09:11" },
  { :course_id => 3, :user_id => 3, :material_id => nil, :can_manage => false, :last_viewed => nil, :created_at => "2013-03-20 01:09:15", :updated_at => "2013-03-20 01:09:15" },
  { :course_id => 1, :user_id => 2, :material_id => nil, :can_manage => true, :last_viewed => nil, :created_at => "2013-03-20 01:33:49", :updated_at => "2013-03-20 01:33:49" },
  { :course_id => 2, :user_id => 7, :material_id => nil, :can_manage => nil, :last_viewed => nil, :created_at => "2013-03-20 02:43:07", :updated_at => "2013-03-20 02:43:07" }
], :without_protection => true )



Feedback.create([
  { :body => "asfasfas", :email => "dsgsdg", :created_at => "2013-03-20 01:45:45", :updated_at => "2013-03-20 01:45:45" },
  { :body => "", :email => "", :created_at => "2013-03-20 01:50:02", :updated_at => "2013-03-20 01:50:02" },
  { :body => "dgasg", :email => "adsgad", :created_at => "2013-03-20 01:50:05", :updated_at => "2013-03-20 01:50:05" }
], :without_protection => true )



Material.create([
  { :name => "Введение", :position => 2.0, :section_id => 1, :study_material_type => "Lecture", :data => {"youtube_link"=>"p-WXiqrzAf8"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:37:13" },
  { :name => "Как устроены Django приложения", :position => 1.0, :section_id => 2, :study_material_type => "Lecture", :data => {"youtube_link"=>"JU2SeliQvMM"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:38:20" },
  { :name => "Создание блога за 30 минут", :position => 2.0, :section_id => 2, :study_material_type => "Lecture", :data => {"youtube_link"=>"srHZoj3ASmk"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:38:51" },
  { :name => "Архитектура", :position => 3.0, :section_id => 1, :study_material_type => "Document", :data => {"body"=>"<p style=\"margin: 0.4em 0px 0.5em; line-height: 19.1875px; color: rgb(0, 0, 0); font-family: sans-serif;\">Архитектура Django похожа на &laquo;<a class=\"mw-redirect\" href=\"http://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C-%D0%9F%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\" title=\"Модель-Представление-Контроллер\">Модель-Представление-Контроллер</a>&raquo; (MVC). Контроллер классической модели MVC примерно соответствует уровню, который в Django называется Представление (<a href=\"http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\" title=\"Английский язык\">англ.</a>&nbsp;<i>View</i>), а презентационная логика Представления реализуется в Django уровнем Шаблонов (<a href=\"http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\" title=\"Английский язык\">англ.</a>&nbsp;<i>Template</i>). Из-за этого уровневую архитектуру Django часто называют &laquo;Модель-Шаблон-Представление&raquo; (MTV).</p>\r\n\r\n<p style=\"margin: 0.4em 0px 0.5em; line-height: 19.1875px; color: rgb(0, 0, 0); font-family: sans-serif;\">Первоначальная разработка Django, как средства для работы новостных ресурсов, достаточно сильно отразилась на его архитектуре: он предоставляет ряд средств, которые помогают в быстрой разработке веб-сайтов информационного характера. Так, например, разработчику не требуется создавать контроллеры и страницы для административной части сайта, в Django есть встроенное приложение для управления содержимым, которое можно включить в любой сайт, сделанный на Django, и которое может управлять сразу несколькими сайтами на одном сервере. Административное приложение позволяет создавать, изменять и удалять любые объекты наполнения сайта, протоколируя все совершённые действия, и предоставляет интерфейс для управления пользователями и группами (с пообъектным назначением прав).</p>\r\n\r\n<p style=\"margin: 0.4em 0px 0.5em; line-height: 19.1875px; color: rgb(0, 0, 0); font-family: sans-serif;\">В дистрибутив Django также включены приложения для системы комментариев, синдикации&nbsp;<a href=\"http://ru.wikipedia.org/wiki/RSS\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\" title=\"RSS\">RSS</a>&nbsp;и&nbsp;<a href=\"http://ru.wikipedia.org/wiki/Atom\" style=\"text-decoration: none; color: rgb(11, 0, 128); background-image: none; background-position: initial initial; background-repeat: initial initial;\" title=\"Atom\">Atom</a>, &laquo;статических страниц&raquo; (которыми можно управлять без необходимости писать контроллеры и представления), перенаправления URL и другое.</p>\r\n"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:37:50" },
  { :name => "Введение в разработку компьютерных игр", :position => 1.0, :section_id => 7, :study_material_type => "Lecture", :data => {"youtube_link"=>"rOLvLE_dvFw"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" },
  { :name => "Разработка игр. Анатомия", :position => 2.0, :section_id => 7, :study_material_type => "Lecture", :data => {"youtube_link"=>"UD2fz4t6lQw"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" },
  { :name => "Оптимизация OpenGL", :position => 8.0, :section_id => 7, :study_material_type => "Document", :data => {"body"=>"<div border:=\"\" clear:=\"\" color:=\"\" font-family:=\"\" font-size:=\"\" font-style:=\"\" font-variant:=\"\" helvetica=\"\" line-height:=\"\" p=\"\" padding:=\"\" style=\"\\&quot;margin:\" text-align:=\"\" u0430=\"\" u0435=\"\" u0435:=\"\" u0438=\"\" u0439=\"\" u043a=\"\" u043e=\"\" u0440=\"\" u0441.=\"\" u0442=\"\" u044b=\"\" u044c=\"\" u044e=\"\" u044f=\"\" vertical-align:=\"\">\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><b>Оптимизация на уровне OpenGL.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Сразу необходимо заметить, что только оптимизация на уровне OpenGL не может решить проблему производительности в целом. Безусловно, прирост производительности будет но не всегда достаточный. OpenGL оптимизацию необходимо использовать вместе с оптимальным алгоритмом отображения ландшафта. Хотя, если размер карты не превышает 128x128, можно обойтись оптимизацией только на уровне OpenGL.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><i>Первое</i>, что можно сделать на уровне OpenGL, это уменьшить число вершин предаваемых на конвейеру текстурирования, для этого необходимо заменить рисование с использованием GL_TRIANGLE_STRIP на эквивалентный GL_TRIANGLE_FAN, как показано на рисунке:</p>\r\n<img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208f.gif\" style=\"border: 0px; max-width: 100%; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" /><span style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">[td]</span><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208g.gif\" style=\"border: 0px; max-width: 100%; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" /><br style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" />\r\n<span style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">[tr]GL_TRIANGLE_STRIP[td]GL_TRIANGLE_FAN</span>\r\n\r\n<table style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">\r\n</table>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Правда в примере, я использовал GL_TRINGLE_STRIP</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><i>Второе</i>, использовать для отображения функцию glDrawElements. Это функция позволяет рендерить множество примитивов вызовом одной функции, тем самым уменьшая число вызовов OpenGL функций. Для того, что бы выполнить рисование с помощью функции glDrawElements необходимо выполнит три шага:</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">1. Активировать массивы с данными, в нашем случае массив вершин и координат текстур (аналогично можно поступить с цветами, нормалями и некоторыми другими атрибутами). Для этого необходимо воспользоваться функцией void glEnableClientState(GLenum Array), где в качестве параметра указать GL_VERTEX_ARRAY, а затем GL_TEXTURE_COORD_ARRAY.</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nglEnableClientState<span style=\"color: rgb(160, 96, 0);\">(</span>GL_VERTEX_ARRAY<span style=\"color: rgb(160, 96, 0);\">)</span>; \r\nglEnableClientState<span style=\"color: rgb(160, 96, 0);\">(</span>GL_TEXTURE_COORD_ARRAY<span style=\"color: rgb(160, 96, 0);\">)</span>;</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">2. Задать параметры данных и массивы для их хранения. Для задания массива и типа вершин служит функция</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">void glVertexPointer( GLint Size, GLenum Type, GLsizei Stride, void *Ptr )&nbsp;<br />\r\nкоторая определяет способ хранения и координаты вершин. При этом Size определяет число координат вершины (может быть равен 2, 3, 4), Type определяет тип данных (может быть равен GL_SHORT, GL_INT, GL_FLOAT, GL_DOUBLE). Иногда удобно хранить в одном массиве другие атрибуты вершины, и тогда параметр Stride задает смещение от координат одной вершины до координат следующей. Если Stride равен нулю, это значит, что координаты расположены последовательно. В параметре Ptr указывается адрес, где находятся данные.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Аналогично можно определить массив координат текстуры, используя команду</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">void glTexCoordPointer(GLint Size, GLenum Type, GLsizei Stride);</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(128, 128, 128);\">// Определяем массив вершин</span>\r\nGLfloat VertexMap<span style=\"color: rgb(160, 96, 0);\">[</span>MapSize<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">3</span><span style=\"color: rgb(160, 96, 0);\">]</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">// Массив координат текстур</span>\r\nGLfloat TextureMap<span style=\"color: rgb(160, 96, 0);\">[</span>MapSize<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">2</span><span style=\"color: rgb(160, 96, 0);\">]</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">// Указываем что конкретно хранит массив</span>\r\nglVertexPointer <span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">3</span>, GL_FLOAT, <span style=\"color: rgb(240, 64, 0);\">0</span>, VertexMap<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\nglTexCoordPointer<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">2</span>, GL_FLOAT, <span style=\"color: rgb(240, 64, 0);\">0</span>, TextureMap<span style=\"color: rgb(160, 96, 0);\">)</span>;</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">3. Заполнить массивы данными и выполнить отрисовку. Как уже было сказано, рисование выполняется с помощью функции</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">void</span> glDrawElements<span style=\"color: rgb(160, 96, 0);\">(</span>GLenum Mode, GLsizei Count, \r\n                      GLenum Type, <span style=\"color: rgb(0, 48, 255);\">const</span> GLvoid *Indices<span style=\"color: rgb(160, 96, 0);\">)</span>;</pre>\r\n</div>\r\n<span style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Mode - указывает какой примитив будет рисоваться, в нашем случае GL_TRIANGLE_STRIP (в принципе может быть любой другой). Count - количество примитивов. Type - тип значений в Indices, может быть GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT или GL_UNSIGNED_INT. В массиве Indices хранятся индексы, в соответствии с которыми данные будут извлекаться из массива вершин и координат текстур.</span></div>\r\n"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:22:37" },
  { :name => "Разработка игр. Визуализация.", :position => 4.0, :section_id => 7, :study_material_type => "Lecture", :data => {"youtube_link"=>"yBdkAYPaf4E"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" },
  { :name => "Основы создания мягких теней (GLSL). Введение", :position => 9.0, :section_id => 7, :study_material_type => "Document", :data => {"body"=>"<h1 id=\"vvedenie\" style=\"color: rgb(0, 48, 75); font-size: 21px; margin: 0px; font-family: verdana, arial, sans-serif; line-height: normal;\">Введение</h1>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Чтобы лучше понять, о чем идет речь, и с чем мы будем бороться, посмотрим на картинку:</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal; text-align: center;\"><img alt=\"Ступенчатая тень | Основы создания мягких теней (GLSL)\" src=\"http://www.gamedev.ru/files/images/42960_1245407525_image_01.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Вследствие конечного (обычно небольшого) размера карты теней появляются так называемые погрешности дискретизации, которые вызывают появление ступенчатости теней.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">В данной статье мы попытаемся найти способ устранить ступенчатость тени и придать им более гладкий и приятный вид. Существует много вариантов придания гладкости теням, но я бы хотел остановиться всего на двух. Эти методы являются простейшими, но в тоже время дают неплохой результат, и не очень влияют на скорость отрисовки. Для создания мягких теней, нам потребуется немного больше данных, нежели в стандартной технике, описанной в предыдущей статье.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><i>Что нам понадобиться кроме текстуры с глубиной сцены</i>: всего лишь текстура, содержащая случайные значения (шум) для первого метода и еще один rendertarget для второго.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Итак, начнем!</p>\r\n"}, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:22:26" },
  { :name => "Разработка игр. Движок", :position => 1.0, :section_id => 8, :study_material_type => "Lecture", :data => {"youtube_link"=>"w34obELZnKE"}, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:00:44" },
  { :name => "Ландшафт шаг за шагом 1", :position => 2.0, :section_id => 8, :study_material_type => "Document", :data => {"body"=>"<p><b style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Введение.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Этот туториал охватывает азы техники создания ландшафтов. Я рассмотрю карту высот, простейший алгоритм визуализации, раскраску (текстурирование) ландшафта, а так же оптимизацию на уровне OpenGL. Что касается примеров, я считаю, что если размер примера (не считая инициализации OpenGL и т.п.) больше 8-10 Кб то это что угодно, но только не пример. Поэтому я старался следовать этому принципу.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><b>Представление ландшафта, карта высот.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Для представления ландшафта мы будем использовать карту высот.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Карта высот - это двумерный массив значений высот ландшафта, взятых с определенным интервалом. Т.е. мы каждому дискретному значению Х и Y в горизонтальной плоскости сопоставляем высоту.</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208a.gif\" style=\"border: 0px; max-width: 100%;\" />&nbsp;<br />\r\nмассив</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208b.gif\" style=\"border: 0px; max-width: 100%;\" />&nbsp;<br />\r\nГрафическое представление массива</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Создать карту высот можно с помощью графического редактора (прекрасно подойдет Photoshop) или с помощью программ специально для этого предназначенных, например TerraGen. Для создания карты высот в Photoshop&#39;е необходимо выполнить фильтр Clouds, а затем несколько раз фильтр Different clouds. И сохранить полученную картинку как Grayscale файл в формате RAW (в принципе можно использовать другой формат, но об этом поговорим позже). Размер карты может быть произвольный, но удобней использовать квадратную, с размером стороны кратным числу степени двойки: 128х128, 256х256 и т.д.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Будем считать, что на представленных примерах светлые области представляют собой возвышения, соответственно темные - низменность.</p>\r\n\r\n<p><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208a.jpg\" style=\"border: 0px; max-width: 100%; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" /><span style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">[td]</span><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208b.jpg\" style=\"border: 0px; max-width: 100%; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" /><br style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\" />\r\n<span style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">[tr]Photoshop[td]TerraGen</span></p>\r\n"}, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:10:54" },
  { :name => "Рердеринг ланшафта", :position => 3.0, :section_id => 8, :study_material_type => "Document", :data => {"body"=>"<p><b style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Рендеринг ландшафта.</b></p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Итак, начнем. Как известно, любая поверхность может быть достаточно точно представлена треугольниками. Поэтому любые четыре расположенные рядом точки карты высот задают прямоугольник, который мы разбиваем на два треугольника и рисуем.</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208c.gif\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">В примере ландшафт реализован в виде класса Terrain. Приведенный ниже кусочек кода - часть функции Terrain::RenderLandscape() демонстрирует простейшую реализацию процедуры рисования.</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span>\r\n<span style=\"color: rgb(0, 48, 255);\">const</span> <span style=\"color: rgb(0, 48, 255);\">unsigned</span> MapSize = <span style=\"color: rgb(240, 64, 0);\">128</span>; <span style=\"color: rgb(128, 128, 128);\">// Объявление из Terrain.H </span>\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span>\r\n<span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>i= <span style=\"color: rgb(240, 64, 0);\">0</span>;i<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;i++<span style=\"color: rgb(160, 96, 0);\">)</span> <span style=\"color: rgb(128, 128, 128);\">// Часть кода из Terrain.Cpp</span>\r\n{\r\n  <span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>j=<span style=\"color: rgb(240, 64, 0);\">0</span>;j<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;j++<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n  { \r\n    x=i*Zoom;\r\n    y=j*Zoom;\r\n\r\n    glBegin<span style=\"color: rgb(160, 96, 0);\">(</span>GL_TRIANGLE_STRIP<span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y+Zoom, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y+Zoom, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n\r\n    glEnd<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n  }\r\n}\r\n\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span></pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208d.gif\" style=\"border: 0px; max-width: 100%;\" />&nbsp;<br />\r\nПример (40 кБ)</p>\r\n"}, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:17:10" },
  { :name => "Раскраска (текстурирование) ландшафта. Интерполяция цветов", :position => 4.0, :section_id => 8, :study_material_type => "Document", :data => {"body"=>"<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><b>Раскраска (текстурирование) ландшафта.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Я расскажу о двух способах закраски ландшафта (и во втором случае текстурирования). Это очень краткое объяснение, не затрагивающее множество аспектов, таких как мультитекстурирование, блендинг нескольких текстур, и т.п. Обо всем этом я напишу отдельную статью.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><b>Способ первый &mdash; интерполяция цветов.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Первый способ раскраски ландшафта состоит в использовании интерполяции цветов. Что такое интерполяция цветов, наверное, знает каждый, но если кто-то не знает, краткий пример. Например, если, рисуя треугольник, каждой вершине задать разный цвет, получим картину изображенную ниже. При этом OpenGL сам выполнит интерполяцию, от нас только требуется включить интерполяцию, что делается просто:</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">glShadeModel(GL_SMOOTH);</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208c.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">ниже приведен код демонстрирующий рисование треугольника с интерполяцией цветов:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span>\r\nglBegin<span style=\"color: rgb(160, 96, 0);\">(</span>GL_TRIANGLE<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glColor3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>,<span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glColor3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">1</span>,<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">1</span>,<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glColor3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">0</span>,<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>,<span style=\"color: rgb(240, 64, 0);\">1</span>,<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\nglEnd<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span></pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Но вернемся к ландшафту. Для раскраски нам опять понадобиться карта, я называю ее картой цветов. Данными для карты цветов служат графические файлы примерно следующего вида:</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208d.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Грубо говоря, любая RGB картинка сохраненная, как Raw-файл, может быть использована в качестве карты цветов. Важно заметить, что ширина и высота этих файлов должны быть равными размеру карты высот!</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Как известно в RGB режиме одна точка изображения описывается тремя байтами - значение Red, Green, Blue компоненты цвета. Таким же образом точки картинки хранятся и в Raw-файле.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Хранить карту цветов (как и карту высот) мы будем в массиве, только в карте высот одному элементу массива соответствует одно значение высоты, а в карте цветов три значения - интенсивность красной, зеленой и синей составляющей цвета. Поэтому введем следующую структуру, которая и будет элементом массива цветов:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">struct</span> RGB\r\n{ \r\n  GLubyte Red, Green, Blue; <span style=\"color: rgb(128, 128, 128);\">// Интенсивности составляющих цвета</span>\r\n}; \r\n\r\n<span style=\"color: rgb(0, 48, 255);\">const</span> <span style=\"color: rgb(0, 48, 255);\">unsigned</span> MapSize = <span style=\"color: rgb(240, 64, 0);\">128</span>;\r\n\r\n<span style=\"color: rgb(128, 128, 128);\">//...</span>\r\nRGB Colors<span style=\"color: rgb(160, 96, 0);\">[</span>MapSize<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span> MapSize<span style=\"color: rgb(160, 96, 0);\">]</span>; <span style=\"color: rgb(128, 128, 128);\">// Массив цветов</span></pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">При этом процедура рисования (я убрал рисование &quot;проволочной&quot; модели) претерпела минимальные изменения:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>i=<span style=\"color: rgb(240, 64, 0);\">0</span>;i<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;i++<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n  <span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>j=<span style=\"color: rgb(240, 64, 0);\">0</span>;j<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;j++<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n  { \r\n    x=i*Zoom;\r\n    y=j*Zoom;\r\n\r\n    glBegin<span style=\"color: rgb(160, 96, 0);\">(</span>GL_TRIANGLE_STRIP<span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glColor3ub<span style=\"color: rgb(160, 96, 0);\">(</span>ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Red, \r\n                 ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Green, ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Blue<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y, Land<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glColor3ub<span style=\"color: rgb(160, 96, 0);\">(</span>ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Red, \r\n                 ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Green, ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span>.Blue<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y, Land<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glColor3ub<span style=\"color: rgb(160, 96, 0);\">(</span>ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Red, \r\n                 ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Green, ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Blue<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y+Zoom, Land<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glColor3ub<span style=\"color: rgb(160, 96, 0);\">(</span>ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Red, \r\n                 ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Green, ColorsMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span>.Blue<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y+Zoom, Land<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n    glEnd<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n  }\r\n}</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208e.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n"}, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:17:22" },
  { :name => "Раскраска (текстурирование) ландшафта. Текстурирование", :position => 5.0, :section_id => 8, :study_material_type => "Document", :data => {"body"=>"<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><b>Способ второй &mdash; текстурирование.</b></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Суть второго способа состоит в наложении на ландшафт текстуры. Для этого нам понадобится текстура, точно такая же как файл для карты цветов, только сохранить его надо как TGA файл (понятно, что выбор формата - это дело вкуса, но в приведенных мною примерах используются TGA-файлы). Я предполагаю что вы знакомы с текстурирование, и не буду описывать процесс загрузки и создания текстуры в OpenGL.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Размер текстуры, может и не соответствовать размеру карты высот. Например для карты высот 128x128 может быть выбрана текстура размером 64x64 или 512x512 точек. В последнем случае качество буде лучше. На практике достаточно выбрать размер текстуры равный размеру карты высот.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Суть метода состоит в текстурирование одной текстурой всех треугольников нашего ландшафта, рассчитывая каждому треугольнику соответствующие координаты текстуры.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Итак, прежде чем приступить к текстурированию мы должны определит шаг изменения координат текстуры. Необходимо вычислить значение 1.0/MapSize (MapSize - размер карты высот). И тогда умножая координаты x и y треугольника на этот шаг, мы получим координаты текстуры соответствующие этому треугольнику. Ниже приведен рисунок иллюстрирующий текстурирование, и пример процедуры рисования.</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208e.gif\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Если вы хотите, чтобы текстура не &quot;растягивалась&quot; на весь ландшафт, а соответствовала определенной его части, необходимо при вычислении шага, вместо 1 подставить нужное вам число, и текстура повториться заданное количество раз.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Шаг изменения координат текстуры объявлен как константа в Terrain.H.</p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">const GLfloat TextureBit = 1.0f/(float)MapSize;&nbsp;<br />\r\nа измененная процедура рисования выглядит следующим образом:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>i=<span style=\"color: rgb(240, 64, 0);\">0</span>;i<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;i++<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n  <span style=\"color: rgb(0, 48, 255);\">for</span> <span style=\"color: rgb(160, 96, 0);\">(</span>j=<span style=\"color: rgb(240, 64, 0);\">0</span>;j<span style=\"color: rgb(160, 96, 0);\">&lt;</span>MapSize-<span style=\"color: rgb(240, 64, 0);\">1</span>;j++<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n  { \r\n    x=i*Zoom;\r\n    y=j*Zoom; \r\n    glBegin<span style=\"color: rgb(160, 96, 0);\">(</span>GL_TRIANGLE_STRIP<span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span>i*TextureBit, j*TextureBit<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">(</span>i + <span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">)</span>*TextureBit, j*TextureBit<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span>i*TextureBit,<span style=\"color: rgb(160, 96, 0);\">(</span>j + <span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">)</span>*TextureBit<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x, y+Zoom, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i<span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n      glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">(</span>i + <span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">)</span>*TextureBit,<span style=\"color: rgb(160, 96, 0);\">(</span>j + <span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">)</span>*TextureBit<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n      glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>x+Zoom, y+Zoom, HeightMap<span style=\"color: rgb(160, 96, 0);\">[</span>i+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">[</span>j+<span style=\"color: rgb(240, 64, 0);\">1</span><span style=\"color: rgb(160, 96, 0);\">]</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n    glEnd<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n  }\r\n}</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p align=\"center\" style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\"><img alt=\"Изображение\" src=\"http://www.gamedev.ru/coding/20208f.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p class=\"mar\" style=\"margin-top: 10px; margin-bottom: 10px; text-indent: 2em; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Следует сказать пару слов о фильтрации текстуры. В приведенном примере используется линейная фильтрация, что намой взгляд, является оптимальным вариантом. Фильтрация ближайший сосед (GL_NEAREST) существенно ухудшает качество, в то время как мипмаппинг практически его не улучшает. Использование мипмаппинга будет иметь смысл, если размер текстуры превышает размер ландшафта хотя бы в два раза, или если текстура повторяется.</p>\r\n"}, :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:17:33" },
  { :name => "Основы создания мягких теней (GLSL). Несколько выборок, вместо одной", :position => 10.0, :section_id => 7, :study_material_type => "Document", :data => {"body"=>"<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Стандартная техника shadow maps во фрагментном шейдере обычно реализуется всего лишь одной выборкой из текстуры:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nshadow2DProj<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_proj_tc<span style=\"color: rgb(160, 96, 0);\">)</span>,</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">где shadow_proj_tc &ndash; это координаты в пространстве источника света. Давайте для удобства завернем это дело в функцию:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">float</span> SampleShadow<span style=\"color: rgb(160, 96, 0);\">(</span>vec3 shadow_tc<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n <span style=\"color: rgb(0, 48, 255);\">return</span> shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc<span style=\"color: rgb(160, 96, 0);\">)</span>.x;\r\n}</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Вместо использования shadow2DProj будет использовать shadow2D, а передавать в функцию значение shadow_proj_tc.xyz / shadow_proj_tc.w. Данная функция и будет нам реализовывать стандартную технику. Таким образом мы получим приведенную выше картинку. Теперь давайте подумаем: а что, если выборок будет не одна, а несколько? Улучшит ли это положение вещей?</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Конечно да! Ведь если сделать несколько выборок вокруг центральной точки и потом усреднить результат &ndash; получим некое подобие размытия. Но так как для каждой точки мы будем сдвигать на постоянный шаг &ndash; то получим довольно однообразную тень, которая также будет иметь зазубрины на краях, хоть они будут и немного смазаны. Для того чтобы устранить этот эффект будем делать шаг в каждой точке в произвольном направлении. Для этого нам понадобится текстура, содержащая шум &ndash; случайные значения. Такую текстуру можно загружать из файла или генерировать в реальном времени (допустим, при инициализации). Генерирование конечно предпочтительнее, так как каждый раз будет новый шум, и освободиться немного места на диске.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Генерировать текстуру можно примерно так:</p>\r\n\r\n<table style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"vertical-align: middle;\">\r\n\t\t\t<div style=\"padding: 5px; margin: 4px; background-color: rgb(242, 242, 242);\">\r\n\t\t\t<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">procedure</span> BuildNoiseTexture<span style=\"color: rgb(160, 96, 0);\">(</span>name:<span style=\"color: rgb(0, 48, 255);\">string</span>; <span style=\"color: rgb(0, 48, 255);\">var</span> texID:cardinal; \r\n                                dimension:integer; use_normal:boolean<span style=\"color: rgb(160, 96, 0);\">)</span>; \r\n<span style=\"color: rgb(0, 48, 255);\">var</span> D : PRGBData;\r\n    x : integer;\r\n    v : Vector3;\r\n<span style=\"color: rgb(0, 48, 255);\">begin</span>\r\n D:=AllocMem<span style=\"color: rgb(160, 96, 0);\">(</span> dimension * dimension * <span style=\"color: rgb(240, 64, 0);\">3</span> <span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n <span style=\"color: rgb(0, 48, 255);\">for</span> x:=<span style=\"color: rgb(240, 64, 0);\">0</span> <span style=\"color: rgb(0, 48, 255);\">to</span> pred<span style=\"color: rgb(160, 96, 0);\">(</span>dimension*dimension<span style=\"color: rgb(160, 96, 0);\">)</span> <span style=\"color: rgb(0, 48, 255);\">do</span> <span style=\"color: rgb(0, 48, 255);\">begin</span>\r\n  v:=v.random_vec;\r\n  <span style=\"color: rgb(0, 48, 255);\">if</span> use_normal\r\n   <span style=\"color: rgb(0, 48, 255);\">then</span> v:=v.normalize;\r\n  D^<span style=\"color: rgb(160, 96, 0);\">[</span>x<span style=\"color: rgb(160, 96, 0);\">]</span>.r:=trunc<span style=\"color: rgb(160, 96, 0);\">(</span> <span style=\"color: rgb(160, 96, 0);\">(</span>v.x * <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span> + <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span><span style=\"color: rgb(160, 96, 0);\">)</span> * <span style=\"color: rgb(240, 64, 0);\">255</span> <span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  D^<span style=\"color: rgb(160, 96, 0);\">[</span>x<span style=\"color: rgb(160, 96, 0);\">]</span>.g:=trunc<span style=\"color: rgb(160, 96, 0);\">(</span> <span style=\"color: rgb(160, 96, 0);\">(</span>v.y * <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span> + <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span><span style=\"color: rgb(160, 96, 0);\">)</span> * <span style=\"color: rgb(240, 64, 0);\">255</span> <span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  D^<span style=\"color: rgb(160, 96, 0);\">[</span>x<span style=\"color: rgb(160, 96, 0);\">]</span>.b:=trunc<span style=\"color: rgb(160, 96, 0);\">(</span> <span style=\"color: rgb(160, 96, 0);\">(</span>v.z * <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span> + <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span><span style=\"color: rgb(160, 96, 0);\">)</span> * <span style=\"color: rgb(240, 64, 0);\">255</span> <span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n <span style=\"color: rgb(0, 48, 255);\">end</span>;\r\n\r\n BuildTexture2D<span style=\"color: rgb(160, 96, 0);\">(</span>name, texID, dimension, dimension, GL_RGB, GL_RGB, GL_UNSIGNED_BYTE, D<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n ReallocMem<span style=\"color: rgb(160, 96, 0);\">(</span>D, <span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(0, 48, 255);\">end</span>;</pre>\r\n\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Эту текстуру и будем передавать в шейдер.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Теперь напишем функцию, которая будет реализовывать нам тень с несколькими выборками:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(0, 48, 255);\">float</span> SampleShadow<span style=\"color: rgb(160, 96, 0);\">(</span>vec3 shadow_tc, vec2 noise, vec2 shadowmap_texel<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n noise = vec2<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dx = vec3<span style=\"color: rgb(160, 96, 0);\">(</span>noise.x * shadowmap_texel.x, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dy = vec3<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, noise.y * shadowmap_texel.y, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dxdy_p = <span style=\"color: rgb(160, 96, 0);\">(</span>dx + dy<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dxdy_n = <span style=\"color: rgb(160, 96, 0);\">(</span>dx - dy<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n\r\n <span style=\"color: rgb(0, 48, 255);\">float</span> result = shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dx<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dx<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dy<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dy<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dxdy_p<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dxdy_p<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dxdy_n<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dxdy_n<span style=\"color: rgb(160, 96, 0);\">)</span>.x ;\r\n\r\n <span style=\"color: rgb(0, 48, 255);\">return</span> <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">125</span> * result;\r\n}</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Я предлагаю вообще не учитывать центральную точку &ndash; это даст нам еще более гладкие тени. Теперь необходимо пояснить &ndash; что мы будем передавать в эту функцию. Первый параметр нам уже знаком. Второй параметр &ndash; это прочитанный из текстуры шум. Третий параметр &ndash; это размер текселя карты теней &ndash; vec2(1.0 / sm_size_X, 1.0 / sm_size_Y). Из основного шейдера будем вызывать нашу функцию примерно таким образом:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nvec2 noise  = <span style=\"color: rgb(240, 64, 0);\">2</span>.<span style=\"color: rgb(240, 64, 0);\">0</span> * texture2D<span style=\"color: rgb(160, 96, 0);\">(</span>noise_texture, gl_TexCoord<span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">]</span>.xy *\r\n              vNoiseScale<span style=\"color: rgb(160, 96, 0);\">)</span>.xy &ndash; vec2<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(0, 48, 255);\">float</span> fShadow = SampleShadow<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_proj_tc.xyz / \r\n                shadow_proj_tc.w, noise, shadow_texel.xy<span style=\"color: rgb(160, 96, 0);\">)</span>;</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">&nbsp;</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Где vNoiseScale &ndash; это количество повторений текстуры шума на экране. Можно вычислить как vec2(screen_size_X / noise_tex_size_X, screen_size_Y / noise_tex_size_Y).</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Результатом работы такой техники будет тень, с претензией на мягкость:</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal; text-align: center;\"><img alt=\"Тень, с претензией на мягкость | Основы создания мягких теней (GLSL)\" src=\"http://www.gamedev.ru/files/images/42964_1245407698_image_02.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n"}, :created_at => "2013-03-20 01:21:33", :updated_at => "2013-03-20 01:22:19" },
  { :name => "Основы создания мягких теней (GLSL). Forward-render хорошо, а post-process-то лучше", :position => 11.0, :section_id => 7, :study_material_type => "Document", :data => {"body"=>"<h1 id=\"p2__forward-render_horosho__a_post\" style=\"color: rgb(0, 48, 75); font-size: 21px; margin: 0px; font-family: verdana, arial, sans-serif; line-height: normal;\">2. Forward-render хорошо, а post-process-то лучше :)</h1>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Описанные выше методы работали в так называемой прямой отрисовке &ndash; то есть непосредственно при рисовании объектов. А что, если тени рассчитывать заранее, а при отрисовке объектов использовать уже рассчитанную текстуру? Какая от этого выгода? Выгода есть. Во первых &ndash; это возможность сгладить тени (проговорился, о чем пойдет речь дальше :)), во вторых &ndash; если шейдер объектов и так достаточно тяжелый, зачем его еще усложнять 8-ю выборками из текстуры? И потом не нужно будет для каждой вершины объекта вычислять матрицу перевода в пространство источника света. Плюс ко всему можно вычислить тени от нескольких источников света, и записать их в одну текстуру. Выгода очевидна! Теперь рассмотрим реализацию.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Все, что нам дополнительно понадобиться для такого расчета теней &ndash; это один полноэкранный прямоугольник и текстура, содержащая глубину сцены. Для того, чтобы нарисовать полноэкранный прямоугольник нет необходимости менять матрицы. Можно воспользоваться вот таким вершинным шейдером:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nvarying vec4 vertex;\r\n\r\n<span style=\"color: rgb(0, 48, 255);\">void</span> main<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{ \r\n  gl_TexCoord<span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">]</span> = gl_MultiTexCoord0;\r\n  gl_Position = vec4<span style=\"color: rgb(160, 96, 0);\">(</span>gl_Vertex.x, gl_Vertex.y, gl_Vertex.z, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  vertex = gl_Position;\r\n}</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">А рисовать его так:</p>\r\n\r\n<table style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"vertical-align: middle;\">\r\n\t\t\t<div style=\"padding: 5px; margin: 4px; background-color: rgb(242, 242, 242);\">\r\n\t\t\t<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nglBegin<span style=\"color: rgb(160, 96, 0);\">(</span>GL_QUADS<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>-<span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, -<span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, z<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span> <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, -<span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, z<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span> <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>,  <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, z<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n  glTexCoord2f<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>; glVertex3f<span style=\"color: rgb(160, 96, 0);\">(</span>-<span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>,  <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, z<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n glEnd;\r\n<span style=\"color: rgb(128, 128, 128);\">// сейчас меня будут ругать за использование deprecated-функционала, ну да ладно :)</span></pre>\r\n\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">А вычислять тени мы будем непосредственно во фрагментном шейдере. Вот таком:</p>\r\n\r\n<table style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"vertical-align: middle;\">\r\n\t\t\t<div style=\"padding: 5px; margin: 4px; background-color: rgb(242, 242, 242);\">\r\n\t\t\t<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\n<span style=\"color: rgb(128, 128, 128);\">// текстура с глубиной сцены</span>\r\nuniform sampler2D depth_texture;\r\n<span style=\"color: rgb(128, 128, 128);\">// shadow maps</span>\r\nuniform sampler2DShadow shadow_texture;\r\n<span style=\"color: rgb(128, 128, 128);\">// текстура шума</span>\r\nuniform sampler2D noise_texture;\r\n\r\nuniform vec4 distort_shadow_texel;\r\n<span style=\"color: rgb(128, 128, 128);\">// первые две компоненты &ndash; кол-во повторений текстуры шума на экране</span>\r\n<span style=\"color: rgb(128, 128, 128);\">// вторые две &ndash; размер текселя карты теней</span>\r\n\r\nuniform mat4 shadow_matrix;\r\n\r\nvarying vec4 vertex;\r\n\r\n<span style=\"color: rgb(0, 48, 255);\">float</span> SampleShadow<span style=\"color: rgb(160, 96, 0);\">(</span>vec3 shadow_tc, vec2 noise, vec2 shadowmap_texel<span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n vec3 dx = vec3<span style=\"color: rgb(160, 96, 0);\">(</span>noise.x * shadowmap_texel.x, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dy = vec3<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, noise.y * shadowmap_texel.y, <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dxdy_p = <span style=\"color: rgb(160, 96, 0);\">(</span>dx + dy<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n vec3 dxdy_n = <span style=\"color: rgb(160, 96, 0);\">(</span>dx - dy<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n\r\n <span style=\"color: rgb(0, 48, 255);\">float</span> result = shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dx<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dx<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dy<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dy<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dxdy_p<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dxdy_p<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc + dxdy_n<span style=\"color: rgb(160, 96, 0);\">)</span>.x +\r\n                shadow2D<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_texture, shadow_tc - dxdy_n<span style=\"color: rgb(160, 96, 0);\">)</span>.x ;\r\n\r\n <span style=\"color: rgb(0, 48, 255);\">return</span> <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">125</span> * result;\r\n}\r\n\r\n<span style=\"color: rgb(0, 48, 255);\">void</span> main<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(160, 96, 0);\">)</span>\r\n{\r\n<span style=\"color: rgb(128, 128, 128);\">// получаем глубину сцены в точке</span>\r\n <span style=\"color: rgb(0, 48, 255);\">float</span> fDepth  = texture2D<span style=\"color: rgb(160, 96, 0);\">(</span>depth_texture, gl_TexCoord<span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">]</span>.st<span style=\"color: rgb(160, 96, 0);\">)</span>.x;\r\n<span style=\"color: rgb(128, 128, 128);\">// получаем вектор с шумом</span>\r\n vec2 noise = <span style=\"color: rgb(240, 64, 0);\">2</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>*texture2D<span style=\"color: rgb(160, 96, 0);\">(</span>noise_texture, gl_TexCoord<span style=\"color: rgb(160, 96, 0);\">[</span><span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">]</span>.xy*distort_shadow_texel.xy<span style=\"color: rgb(160, 96, 0);\">)</span>.xy\r\n              - vec2<span style=\"color: rgb(160, 96, 0);\">(</span><span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">// восстанавливаем мировые координаты точки</span>\r\n<span style=\"color: rgb(128, 128, 128);\">// нам очень повезло, что мы не меняли матрицы при отрисовке прямоугольника :)</span>\r\n vec4 inv_proj = gl_ModelViewProjectionMatrixInverse * \r\n                 vec4<span style=\"color: rgb(160, 96, 0);\">(</span>vertex.xy, <span style=\"color: rgb(240, 64, 0);\">2</span>.<span style=\"color: rgb(240, 64, 0);\">0</span> * fDepth - <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">// находим координаты точки в пространстве источника света</span>\r\n vec4 shadow_proj = shadow_matrix * <span style=\"color: rgb(160, 96, 0);\">(</span>inv_proj / inv_proj.w<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n<span style=\"color: rgb(128, 128, 128);\">// вычисляем тень</span>\r\n <span style=\"color: rgb(0, 48, 255);\">float</span> fShadow = SampleShadow<span style=\"color: rgb(160, 96, 0);\">(</span>shadow_proj.xyz / shadow_proj.w, \r\n                 noise, distort_shadow_texel.zw<span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n\r\n gl_FragColor = vec4<span style=\"color: rgb(160, 96, 0);\">(</span> fShadow, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span>, <span style=\"color: rgb(240, 64, 0);\">1</span>.<span style=\"color: rgb(240, 64, 0);\">0</span><span style=\"color: rgb(160, 96, 0);\">)</span>;\r\n}</pre>\r\n\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">В полученной текстуре у нас будет содержаться что-то вроде:</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal; text-align: center;\"><img alt=\"Текстура с тенью | Основы создания мягких теней (GLSL)\" src=\"http://www.gamedev.ru/files/images/42967_1245408043_image_03.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Теперь можно отказаться от вычисления теней при отрисовке объектов, а использовать полученную текстуру по аналогии с технологией &ldquo;Light maps&rdquo;. Таким образом, шейдер отрисовки объектов превращается в нечто подобное:</p>\r\n\r\n<div style=\"color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; padding: 5px; margin: 4px; line-height: normal; background-color: rgb(242, 242, 242);\">\r\n<pre style=\"font-size: 14px; font-family: 'courier new', courier, monospace; margin-top: 0px; margin-bottom: 0px;\">\r\nuniform sampler2D lightmap_texture;\r\n&hellip;\r\nvec2 proj_tc = <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span> * proj_coords.xy / proj_coords.w + <span style=\"color: rgb(240, 64, 0);\">0</span>.<span style=\"color: rgb(240, 64, 0);\">5</span>;\r\n<span style=\"color: rgb(0, 48, 255);\">float</span> fShadow = texture2D<span style=\"color: rgb(160, 96, 0);\">(</span>lightmap_texture, proj_tc<span style=\"color: rgb(160, 96, 0);\">)</span>.x;</pre>\r\n</div>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">где proj_coords &ndash; проективные координаты.</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Таким образом мы избавились от вычисления теней непосредственно при отрисовке объектов и плюс к этому тени у нас храняться в отдельной текстуре, которую нам никто не мешает правильно размыть. Используя&nbsp;<a href=\"http://www.gamedev.ru/terms/DepthBasedBlur\" style=\"color: rgb(49, 141, 196);\" title=\"Depth-based blur\">размытие с учетом глубины</a>, мы получим самые настоящие мягкие тени. Вот такие:</p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal; text-align: center;\"><img alt=\"Размытие теней с учетом глубины | Основы создания мягких теней (GLSL)\" src=\"http://www.gamedev.ru/files/images/42968_1245408087_image_04.jpg\" style=\"border: 0px; max-width: 100%;\" /></p>\r\n\r\n<p style=\"margin-top: 10px; margin-bottom: 10px; color: rgb(0, 0, 0); font-family: verdana, arial, sans-serif; font-size: 12px; line-height: normal;\">Конечно, такие тени потребуют дополнительных вычислений, но, я думаю, оно того стоит. Причем самым сложным в вычислительном плане здесь будет размытие текстуры с тенями. Таким образом, мы добились мягких теней, с относительно небольшими затратами. Надеюсь, статья была полезной. Удачи!</p>\r\n"}, :created_at => "2013-03-20 01:22:09", :updated_at => "2013-03-20 01:22:46" },
  { :name => "Установка Ruby", :position => 1.0, :section_id => 3, :study_material_type => "Lecture", :data => {"youtube_link"=>"WJlfVjGt6Hg"}, :created_at => "2013-03-20 01:27:16", :updated_at => "2013-03-20 01:27:16" },
  { :name => "Установка Rails", :position => 2.0, :section_id => 3, :study_material_type => "Lecture", :data => {"youtube_link"=>"NmWYZVUln4E"}, :created_at => "2013-03-20 01:27:45", :updated_at => "2013-03-20 01:27:45" },
  { :name => "Ещё раз в текстовом формате", :position => 3.0, :section_id => 3, :study_material_type => "Document", :data => {"body"=>"<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Ruby</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\"><img align=\"right\" src=\"http://www.rubyonrails.ru/assets/download/ruby-25361dbf792a5eddfb18ed9f74e6b4f5.png\" style=\"border-width: 0px; margin: 0px 10px 5px;\" />\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Для использования с&nbsp;Rails рекомендуется Ruby версии&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">1.8.7</span>&nbsp;или&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">1.9.3</span>. Для новых приложений лучше использовать версию Ruby&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">1.9.3</span>. Не поддерживаются версии Ruby 1.8.6 и ниже, а также Ruby 1.9.1.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\"><a href=\"http://www.ruby-lang.org/en/downloads/\" style=\"color: rgb(51, 102, 153);\">Из исходников:</a>&nbsp;&laquo;Сделай сам&raquo;&nbsp;<br />\r\n<a href=\"http://rubyforge.org/projects/rubyinstaller/\" style=\"color: rgb(51, 102, 153);\">Инсталлятор для&nbsp;Windows:</a>&nbsp;Ruby, популярные расширения, редактор&nbsp;<br />\r\n<b>OS&nbsp;X Leopard и выше:</b>&nbsp;Поставляется&nbsp;<i>в комплекте</i>&nbsp;с Ruby, RubyGems и Ruby on Rails! Установка не требуется.&nbsp;<br />\r\n<b>OS&nbsp;X Tiger:</b>&nbsp;Поставляется&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">с&nbsp;неработоспособным</span>&nbsp;Ruby,<a href=\"http://hivelogic.com/articles/2005/12/01/ruby_rails_lighttpd_mysql_tiger\" style=\"color: rgb(51, 102, 153);\">см. это руководство</a>.&nbsp;</p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n\r\n<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">RubyGems</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\"><img align=\"right\" src=\"http://www.rubyonrails.ru/assets/download/rubygems-2c393d29186042d7cd4716b6d48994d9.png\" style=\"border-width: 0px; margin: 0px 10px 5px;\" />\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\"><a href=\"http://docs.rubygems.org/\" style=\"color: rgb(51, 102, 153);\">RubyGems</a>&nbsp;&nbsp;&mdash;&nbsp;<span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\">стандартный менеджер пакетов для Ruby</span>. Он&nbsp;похож на&nbsp;apt-get, yum, emerge, и&nbsp;другие менеджеры пакетов ОС&nbsp;*nix.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Загрузить:&nbsp;<a href=\"http://rubyforge.org/frs/?group_id=126\" style=\"color: rgb(51, 102, 153);\">с RubyForge</a>&nbsp;<br />\r\n<small>(распакуйте и запустите &laquo;ruby setup.rb&raquo;).</small></p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n\r\n<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Rails</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Если RubyGems уже установлен, вы&nbsp;можете установить Rails со&nbsp;всеми зависимостями одной командой:</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px; margin-left: 20px;\"><b>gem install rails --include-dependencies</b></p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Новые версии Rails устанавливаются таким&nbsp;же образом. Компоненты Rails также можно&nbsp;<a href=\"http://rubyforge.org/frs/?group_id=307\" style=\"color: rgb(51, 102, 153);\">загрузить и&nbsp;установить отдельно</a>.</p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n"}, :created_at => "2013-03-20 01:28:54", :updated_at => "2013-03-20 02:46:33" },
  { :name => "Создание блога за считанные минуты", :position => 1.0, :section_id => 4, :study_material_type => "Lecture", :data => {"youtube_link"=>"JaL9ul17kx0"}, :created_at => "2013-03-20 01:30:06", :updated_at => "2013-03-20 01:30:06" },
  { :name => "Книги", :position => 2.0, :section_id => 4, :study_material_type => "Document", :data => {"body"=>"<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Книги</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Книга&nbsp;<a href=\"http://www.pragmaticprogrammer.com/titles/rails/index.html\" style=\"color: rgb(51, 102, 153);\">&laquo;Agile Web Development with Rails&raquo;</a>&nbsp;содержит все необходимое для того, чтобы сразу начать разрабатывать веб-приложения на Ruby on Rails. Книга&nbsp;<a href=\"http://pragmaticprogrammer.com/titles/fr_rr/\" style=\"color: rgb(51, 102, 153);\">&laquo;Rails Recipes&raquo;</a>содержит множество примеров и идей для вашего приложения. Как сделать аутентификацию пользователей? Как добавить AJAX-эффекты? Как добавить поддержку тегов? Все описано в этой книге.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px; text-align: center;\"><a class=\"no_link_hover\" href=\"http://www.pragmaticprogrammer.com/titles/rails/index.html\" style=\"color: rgb(51, 102, 153);\"><img class=\"bordered\" height=\"150\" src=\"http://www.rubyonrails.ru/assets/books/awdr2-d3885432f741507641b65fb03cf2b7c8.gif\" style=\"border: 2px solid rgb(204, 204, 204); padding: 2px; margin: 0px 10px 5px 15px;\" width=\"140\" /></a>&nbsp;<a class=\"no_link_hover\" href=\"http://pragmaticprogrammer.com/titles/fr_rr/\" style=\"color: rgb(51, 102, 153);\"><img class=\"bordered\" height=\"150\" src=\"http://www.rubyonrails.ru/assets/documentation/railsrecipes-5ddbd168920406305ae5bb069b6e089d.gif\" style=\"border: 2px solid rgb(204, 204, 204); padding: 2px; margin: 0px 10px 5px 15px;\" width=\"140\" /></a></p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Обе книги можно купить в формате PDF.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Теперь доступны и переводы этих книг на русский язык!</p>\r\n<img class=\"bordered\" height=\"140\" src=\"http://www.rubyonrails.ru/assets/books/awdr2_ru-984f6608b817f37a05ee79cc63ce7fb5.jpg\" style=\"border: 2px solid rgb(204, 204, 204); padding: 2px; margin: 0px 10px 5px 0px;\" width=\"99\" />&nbsp;<br />\r\nД. Томас, Д. Х. Хэнссон&nbsp;<br />\r\n<b>Гибкая разработка веб-приложений в среде Rails</b>&nbsp;<br />\r\nИздательство: Питер, 2007 г.&nbsp;<br />\r\nМягкая обложка, 720 стр. ISBN 978-5-91180-009-3&nbsp;<br />\r\n<br />\r\n<img class=\"bordered\" height=\"140\" src=\"http://www.rubyonrails.ru/assets/books/receipes_ru-6edf5e75ded4332124c32c59dd65d9d2.jpg\" style=\"border: 2px solid rgb(204, 204, 204); padding: 2px; margin: 0px 10px 5px 0px;\" width=\"99\" />&nbsp;<br />\r\nФоулер Ч.&nbsp;<br />\r\n<b>Rails. Сборник рецептов</b>&nbsp;<br />\r\nИздательство: Питер, 2007 г.&nbsp;<br />\r\n1-е издание, 2007 год, 256 стр., формат 17x24 см, твердая обложка, ISBN 978-5-91180-652-1&nbsp;</div>\r\n"}, :created_at => "2013-03-20 01:30:37", :updated_at => "2013-03-20 01:30:37" },
  { :name => "Сообщество", :position => 4.0, :section_id => 4, :study_material_type => "Document", :data => {"body"=>"<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Список рассылки</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\"><span class=\"highlight\" style=\"background-color: rgb(255, 255, 204);\"><b>Русскоязычный список рассылки</b>&nbsp;по Ruby on Rails&nbsp;</span>&nbsp;&mdash; это то место, где пользователи помогают друг другу, объявляют о новых проектах и обсуждают все, относящееся к фреймворку и сообществу. Вы можете непосредственно&nbsp;<a href=\"http://groups.google.com/group/ror2ru/subscribe\" style=\"color: rgb(51, 102, 153);\">подписаться на него</a>&nbsp;через Google Groups,&nbsp;<a href=\"http://groups.google.com/group/ror2ru\" style=\"color: rgb(51, 102, 153);\">читать его с помощью броузера</a>&nbsp;или&nbsp;<a href=\"http://groups.google.com/group/ror2ru/feed/rss_v2_0_msgs.xml?num=50\" style=\"color: rgb(51, 102, 153);\">читать RSS-поток</a>.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Присоединяйтесь!&nbsp;<br />\r\n<a href=\"http://groups.google.com/group/ror2ru\" style=\"color: rgb(51, 102, 153);\">groups.google.com/group/ror2ru</a></p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n\r\n<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">IRC</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Иногда проще всего получить помощь или обсудить что-то в реальном времени. Для этого есть канал<b>#rubyonrails</b>&nbsp;в сети&nbsp;<b>irc.freenode.net</b>.</p>\r\n</div>\r\n\r\n<div class=\"clearall\" style=\"margin: 0px 0px 10px; padding: 10px 0px 0px; clear: both; font-size: 2px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; line-height: normal;\">&nbsp;</div>\r\n\r\n<div class=\"sub\" style=\"float: left; width: 200px; text-align: right; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<h1 style=\"padding: 0px; margin: 0px 0px 20px; color: rgb(0, 0, 0); font-size: 28px; line-height: 33px; font-family: georgia;\">Патчи и отслеживание ошибок</h1>\r\n</div>\r\n\r\n<div class=\"main\" style=\"float: right; width: 450px; font-family: verdana, 'Lucida Grande', arial, helvetica, sans-serif; font-size: medium; line-height: normal;\">\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Разработка Ruby on Rails ведется в Git-репозитории, размещенном на GitHub:&nbsp;<a href=\"http://github.com/rails/rails\" style=\"color: rgb(51, 102, 153);\">github.com/rails/rails</a>.</p>\r\n\r\n<p style=\"font-size: 18px; line-height: 25px; margin-top: 0px; font-family: georgia; margin-bottom: 25px;\">Для учета сообщений об ошибках и патчей используется Lighthouse:&nbsp;<a href=\"http://rails.lighthouseapp.com/\" style=\"color: rgb(51, 102, 153);\">rails.lighthouseapp.com</a>.</p>\r\n</div>\r\n"}, :created_at => "2013-03-20 01:32:13", :updated_at => "2013-03-20 01:32:13" }
], :without_protection => true )



Section.create([
  { :name => "Введение", :date => "2013-03-20", :course_id => 1, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:37:57" },
  { :name => "Продвинутый материал", :date => "2013-03-20", :course_id => 1, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:38:06" },
  { :name => "Установка Ruby on Rails", :date => "2013-03-20", :course_id => 2, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:28:34" },
  { :name => "Создание простейшего приложения", :date => "2013-03-20", :course_id => 2, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:29:12" },
  { :name => "Неделя 1", :date => "2013-03-15", :course_id => 3, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" },
  { :name => "Неделя 2", :date => "2013-03-22", :course_id => 3, :created_at => "2013-03-20 01:00:43", :updated_at => "2013-03-20 01:00:43" }
], :without_protection => true )



User.create([
  { :username => "Student", :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 01:00:44", :email => "student@example.com", :encrypted_password => "$2a$10$tUBKTLq5GG4JIbK8gMm9xeFOU1RutvEt6dhllpyz1TFiq3JvEoBlS", :reset_password_token => nil, :reset_password_sent_at => nil, :remember_created_at => nil, :sign_in_count => 0, :current_sign_in_at => nil, :last_sign_in_at => nil, :current_sign_in_ip => nil, :last_sign_in_ip => nil },
  { :username => "Teacher", :created_at => "2013-03-20 01:00:44", :updated_at => "2013-03-20 02:43:26", :email => "teacher@example.com", :encrypted_password => "$2a$10$tRfMViqqnUn6mcA9RlYJye.gnZd5jeHc.cvBs.mwLAEnDqMBSnn/6", :reset_password_token => nil, :reset_password_sent_at => nil, :remember_created_at => nil, :sign_in_count => 4, :current_sign_in_at => "2013-03-20 02:43:26", :last_sign_in_at => "2013-03-20 01:58:28", :current_sign_in_ip => "127.0.0.1", :last_sign_in_ip => "127.0.0.1" },
  { :username => nil, :created_at => "2013-03-20 02:13:16", :updated_at => "2013-03-20 02:13:16", :email => "alexandrepavlova@gmail.com", :encrypted_password => "$2a$10$0lNsCamhgt.t.onKxn56aefm4NsCXZk/0MuxjClt269TDko1SMOe2", :reset_password_token => nil, :reset_password_sent_at => nil, :remember_created_at => nil, :sign_in_count => 1, :current_sign_in_at => "2013-03-20 02:13:16", :last_sign_in_at => "2013-03-20 02:13:16", :current_sign_in_ip => "127.0.0.1", :last_sign_in_ip => "127.0.0.1" },
  { :username => nil, :created_at => "2013-03-20 02:13:42", :updated_at => "2013-03-20 02:13:42", :email => "storeairport@gmail.com", :encrypted_password => "$2a$10$Ub8ISaY0WQ6zAJ.DqP8greGKCPJhWfVkVcseDZj6TY1ME90e1lVMC", :reset_password_token => nil, :reset_password_sent_at => nil, :remember_created_at => nil, :sign_in_count => 1, :current_sign_in_at => "2013-03-20 02:13:42", :last_sign_in_at => "2013-03-20 02:13:42", :current_sign_in_ip => "127.0.0.1", :last_sign_in_ip => "127.0.0.1" }
], :without_protection => true )


